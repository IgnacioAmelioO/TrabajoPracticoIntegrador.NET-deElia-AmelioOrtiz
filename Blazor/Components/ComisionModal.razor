@using DTOs
@using Api.Clients
@inject IJSRuntime JSRuntime

<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="background: rgba(0,0,0,0.4);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@((editing?.Id_comision == 0) ? "Nueva Comisión" : "Editar Comisión")</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-2">
                    <label class="form-label">Descripción</label>
                    <input class="form-control" @bind="editing.Desc_comision" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Año</label>
                    <input type="number" class="form-control" @bind="editing.Anio_especialidad" min="1" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Plan</label>
                    <select class="form-select" @bind="editing.Id_plan">
                        <option value="0">-- Seleccionar plan --</option>
                        @if (plans != null)
                        {
                            @foreach (var plan in plans)
                            {
                                <option value="@plan.Id_plan">@plan.Desc_plan</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="Close">Cancelar</button>
                <button class="btn btn-primary" @onclick="Save">Guardar</button>
            </div>
        </div>
    </div>
</div>

@code {
    private bool showModal;
    private ComisionDTO editing = new ComisionDTO();
    private List<PlanDTO>? plans;

    [Parameter] public EventCallback OnComisionChanged { get; set; }

    private async Task LoadPlansSafe()
    {
        try
        {
            plans = (await PlanApiClient.GetAllAsync())?.ToList() ?? new List<PlanDTO>();
        }
        catch
        {
            plans = new List<PlanDTO>();
        }
    }

    public async Task ShowAddModal()
    {
        editing = new ComisionDTO();
        await LoadPlansSafe();
        showModal = true;
        StateHasChanged();
    }

    public async Task ShowEditModal(ComisionDTO c)
    {
        editing = new ComisionDTO
        {
            Id_comision = c.Id_comision,
            Desc_comision = c.Desc_comision,
            Anio_especialidad = c.Anio_especialidad,
            Id_plan = c.Id_plan
        };
        await LoadPlansSafe();
        showModal = true;
        StateHasChanged();
    }

    private void Close() => showModal = false;

    private async Task Save()
    {
        try
        {
            if (editing.Id_comision == 0)
                await ComisionApiClient.AddAsync(editing);
            else
                await ComisionApiClient.UpdateAsync(editing);

            showModal = false;
            await OnComisionChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar: " + ex.Message);
        }
    }
}