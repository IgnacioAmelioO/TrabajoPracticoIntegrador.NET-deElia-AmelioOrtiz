@page "/comisiones"
@using DTOs
@using Api.Clients
@using System.Linq
@inject IJSRuntime JSRuntime

<PageTitle>Comisiones</PageTitle>

<div class="container-fluid">
    <h3>Comisiones</h3>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <div class="mb-3">
        <button class="btn btn-primary" @onclick="async () => await OpenAddModal()">Agregar</button>
    </div>

    @if (loading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status"><span class="visually-hidden">Cargando...</span></div>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Id</th>
                        <th>Descripción</th>
                        <th>Año</th>
                        <th>Plan</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (comisiones != null && comisiones.Any())
                    {
                        @foreach (var c in comisiones)
                        {
                            <tr>
                                <td>@c.Id_comision</td>
                                <td>@c.Desc_comision</td>
                                <td>@c.Anio_especialidad</td>
                                <td>@(plans?.FirstOrDefault(p => p.Id_plan == c.Id_plan)?.Desc_plan ?? c.Id_plan.ToString())</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary me-1" @onclick="async () => await OpenEditModal(c)">Editar</button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteComision(c.Id_comision)">Eliminar</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<ComisionModal @ref="comisionModal" OnComisionChanged="LoadComisiones" />

@code {
    private List<ComisionDTO>? comisiones;
    private List<PlanDTO>? plans;
    private bool loading = true;
    private string errorMessage = string.Empty;
    private ComisionModal comisionModal = null!;

    protected override async Task OnInitializedAsync() => await LoadComisiones();

    private async Task LoadComisiones()
    {
        try
        {
            loading = true;
            comisiones = (await ComisionApiClient.GetAllAsync())?.ToList();
            plans = (await PlanApiClient.GetAllAsync())?.ToList();
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = "Error al cargar comisiones o planes: " + ex.Message;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task OpenAddModal()
    {
        if (comisionModal != null)
            await comisionModal.ShowAddModal();
    }

    private async Task OpenEditModal(ComisionDTO c)
    {
        if (comisionModal != null)
            await comisionModal.ShowEditModal(c);
    }

    private async Task DeleteComision(int id)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"¿Eliminar comisión {id}?")) return;
        try
        {
            await ComisionApiClient.DeleteAsync(id);
            await LoadComisiones();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar: " + ex.Message);
        }
    }
}